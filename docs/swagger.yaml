basePath: /
definitions:
  domain.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  payload.CreateAddressDTO:
    properties:
      company:
        type: string
      country:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      state:
        type: string
      streetAddress:
        type: string
      type:
        type: string
      zipCode:
        type: string
    required:
    - country
    - email
    - firstName
    - lastName
    - phone
    - state
    - streetAddress
    - type
    - zipCode
    type: object
  payload.CreateFavoriteDTO:
    properties:
      productId:
        type: string
    required:
    - productId
    type: object
  payload.CreateOrderPayload:
    properties:
      addressId:
        type: string
      products:
        items:
          $ref: '#/definitions/payload.OrderProductPayload'
        type: array
      shippingPrice:
        type: number
      voucherId:
        type: string
    required:
    - addressId
    - products
    - shippingPrice
    type: object
  payload.CreateProductDTO:
    properties:
      description:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      price:
        type: number
      productOption:
        items:
          $ref: '#/definitions/payload.ProductOptionDTO'
        type: array
      sellerId:
        type: string
    required:
    - description
    - imageUrl
    - name
    - price
    - productOption
    - sellerId
    type: object
  payload.CreateSellerDTO:
    properties:
      description:
        type: string
      location:
        type: string
      logoUrl:
        type: string
      name:
        type: string
    required:
    - description
    - location
    - logoUrl
    - name
    type: object
  payload.CreateTagDTO:
    properties:
      label:
        type: string
      show:
        type: boolean
    required:
    - label
    - show
    type: object
  payload.CreateVoucherDTO:
    properties:
      code:
        type: string
      expiredAt:
        type: string
      maxDiscount:
        type: number
      minTotalPrice:
        type: number
      percentage:
        type: number
      quota:
        type: integer
    required:
    - code
    - expiredAt
    - maxDiscount
    - minTotalPrice
    - percentage
    - quota
    type: object
  payload.OrderProductPayload:
    properties:
      productSizeId:
        type: string
      quantity:
        type: integer
    required:
    - productSizeId
    - quantity
    type: object
  payload.ProductOptionDTO:
    properties:
      imageUrl:
        type: string
      label:
        type: string
      productSize:
        items:
          $ref: '#/definitions/payload.ProductSizeDTO'
        type: array
    required:
    - imageUrl
    - label
    - productSize
    type: object
  payload.ProductSizeDTO:
    properties:
      quantity:
        type: integer
      sizeId:
        type: string
    required:
    - quantity
    - sizeId
    type: object
  payload.UpdateAddressDTO:
    properties:
      company:
        type: string
      country:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      phone:
        type: string
      state:
        type: string
      streetAddress:
        type: string
      type:
        type: string
      zipCode:
        type: string
    required:
    - country
    - email
    - firstName
    - id
    - lastName
    - phone
    - state
    - streetAddress
    - type
    - zipCode
    type: object
  payload.UpdateSellerDTO:
    properties:
      description:
        type: string
      id:
        type: string
      location:
        type: string
      logoUrl:
        type: string
      name:
        type: string
    required:
    - description
    - id
    - location
    - logoUrl
    - name
    type: object
  payload.UpdateTagDTO:
    properties:
      id:
        type: integer
      label:
        type: string
      show:
        type: boolean
    required:
    - id
    - label
    - show
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server celler server.
  title: Sofware Engineering Project Backend API
  version: "1.0"
paths:
  /api/address:
    get:
      consumes:
      - application/json
      description: Get address By User ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get address By User ID
      tags:
      - Address
    post:
      consumes:
      - application/json
      description: Create Address
      parameters:
      - description: Address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/payload.CreateAddressDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Create Address
      tags:
      - Address
    put:
      consumes:
      - application/json
      description: Update Address
      parameters:
      - description: Address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateAddressDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Update Address
      tags:
      - Address
  /api/address/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Delete Address
      tags:
      - Address
  /api/auth/google:
    get:
      consumes:
      - application/json
      description: Get google auth url
      parameters:
      - description: Redirect url
        in: query
        name: redirectUrl
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get google auth url
      tags:
      - Auth
  /api/auth/google/callback:
    get:
      consumes:
      - application/json
      description: Sign in with google
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Sign in with google
      tags:
      - Auth
  /api/auth/logout:
    get:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Logout
      tags:
      - Auth
  /api/auth/me:
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - Auth
  /api/favorite:
    get:
      consumes:
      - application/json
      description: Get favorite by user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get favorite by user id
      tags:
      - Favorite
    post:
      consumes:
      - application/json
      description: Create favorite
      parameters:
      - description: Favorite
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateFavoriteDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create favorite
      tags:
      - Favorite
  /api/favorite/{id}:
    delete:
      consumes:
      - application/json
      description: Delete favorite
      parameters:
      - description: Favorite ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete favorite
      tags:
      - Favorite
  /api/order:
    get:
      consumes:
      - application/json
      description: Get all order
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all order
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: Create order
      parameters:
      - description: Create Order Payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateOrderPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create order
      tags:
      - Order
  /api/order/self:
    get:
      consumes:
      - application/json
      description: Get self order
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get self order
      tags:
      - Order
  /api/product:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get all products
      tags:
      - Product
    post:
      consumes:
      - application/json
      parameters:
      - description: Product Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Create product
      tags:
      - Product
  /api/product/{id}:
    get:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get product by id
      tags:
      - Product
  /api/product/seller/{id}:
    get:
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get products by seller id
      tags:
      - Product
  /api/seller:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get all sellers
      tags:
      - Seller
    patch:
      consumes:
      - application/json
      parameters:
      - description: Update Seller
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateSellerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Update seller
      tags:
      - Seller
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Seller
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateSellerDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create seller
      tags:
      - Seller
  /api/seller/{id}:
    get:
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get seller by id
      tags:
      - Seller
  /api/seller/owner:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all sellers by owner
      tags:
      - Seller
  /api/tags:
    get:
      consumes:
      - application/json
      description: Get all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get all tags
      tags:
      - Tags
    patch:
      consumes:
      - application/json
      description: Update a tag
      parameters:
      - description: Tag
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateTagDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Update a tag
      tags:
      - Tags
    post:
      consumes:
      - application/json
      description: Create a tag
      parameters:
      - description: Tag
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/payload.CreateTagDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Create a tag
      tags:
      - Tags
  /api/user:
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - User
  /api/voucher:
    post:
      consumes:
      - application/json
      description: Create voucher
      parameters:
      - description: Voucher
        in: body
        name: voucher
        required: true
        schema:
          $ref: '#/definitions/payload.CreateVoucherDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create voucher
      tags:
      - Voucher
  /api/voucher/{code}:
    get:
      consumes:
      - application/json
      description: Search voucher by code
      parameters:
      - description: Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Search voucher by code
      tags:
      - Voucher
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
