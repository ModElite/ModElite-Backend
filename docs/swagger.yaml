basePath: /
definitions:
  domain.AccountType:
    enum:
    - ADMIN
    - USER
    type: string
    x-enum-varnames:
    - AdminAccount
    - UserAccount
  domain.Address:
    properties:
      address:
        type: string
      createdAt:
        type: string
      default:
        type: boolean
      district:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      label:
        type: string
      lastName:
        type: string
      phone:
        type: string
      province:
        type: string
      subDistrict:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
      zipCode:
        type: string
    type: object
  domain.Cart:
    properties:
      createdAt:
        type: string
      product:
        $ref: '#/definitions/domain.ProductData'
      productSizeId:
        type: string
      quantity:
        type: integer
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  domain.District:
    properties:
      id:
        type: string
      nameTh:
        type: string
      provinceId:
        type: string
    type: object
  domain.Favorite:
    properties:
      createdAt:
        type: string
      product:
        $ref: '#/definitions/domain.Product'
      productId:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userId:
        type: string
    type: object
  domain.Order:
    properties:
      address:
        type: string
      createdAt:
        type: string
      discount:
        type: number
      expressProvider:
        type: string
      expressTrackingNumber:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      orderProduct:
        items:
          $ref: '#/definitions/domain.OrderProduct'
        type: array
      orderProductData:
        items:
          $ref: '#/definitions/domain.OrderProductResponse'
        type: array
      productPrice:
        type: number
      sellerPaymentProductAmount:
        type: number
      sellerPaymentShippingAmount:
        type: number
      sellerPaymentStatus:
        type: boolean
      shippingPrice:
        type: number
      status:
        $ref: '#/definitions/domain.OrderStatusType'
      totalPrice:
        type: number
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userId:
        type: string
      voucherCode:
        type: string
    type: object
  domain.OrderProduct:
    properties:
      createdAt:
        type: string
      id:
        type: string
      orderId:
        type: string
      price:
        type: number
      productSizeId:
        type: string
      quantity:
        type: integer
      sellerId:
        type: string
      updatedAt:
        type: string
    type: object
  domain.OrderProductResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      orderId:
        type: string
      price:
        type: number
      productDescription:
        type: string
      productImageUrl:
        type: string
      productName:
        type: string
      productOptionImageUrl:
        type: string
      productOptionLabel:
        type: string
      productPrice:
        type: number
      productSize:
        type: string
      productSizeId:
        type: string
      quantity:
        type: integer
      sellerId:
        type: string
      sellerLogoUrl:
        type: string
      sellerName:
        type: string
      updatedAt:
        type: string
    type: object
  domain.OrderStatusType:
    enum:
    - PENDING
    - PAYMENT_SUCCESS
    - DELIVERY_ON_THE_WAY
    - REFUND
    - END
    - CANCEL
    type: string
    x-enum-varnames:
    - ORDER_PENDING
    - ORDER_PAYMENT_SUCCESS
    - ORDER_DELIVERY_ON_THE_WAY
    - ORDER_REFUND
    - ORDER_END
    - ORDER_CANCEL
  domain.Product:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      feature:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      price:
        type: number
      productOption:
        items:
          $ref: '#/definitions/domain.ProductOption'
        type: array
      seller:
        $ref: '#/definitions/domain.Seller'
      seller_name:
        type: string
      sellerId:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/domain.Tag'
        type: array
      updatedAt:
        type: string
    type: object
  domain.ProductData:
    properties:
      product_image:
        type: string
      productDescription:
        type: string
      productName:
        type: string
      productOption:
        type: string
      productPrice:
        type: integer
      quantity:
        type: integer
      seller:
        type: string
      size:
        type: string
    type: object
  domain.ProductOption:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      label:
        type: string
      productSize:
        items:
          $ref: '#/definitions/domain.ProductSize'
        type: array
      updatedAt:
        type: string
    type: object
  domain.ProductSize:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: string
      quantity:
        type: integer
      size:
        $ref: '#/definitions/domain.Size'
      sizeId:
        type: string
      updatedAt:
        type: string
    type: object
  domain.Province:
    properties:
      id:
        type: string
      nameTh:
        type: string
    type: object
  domain.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  domain.Seller:
    properties:
      bankAccountName:
        type: string
      bankAccountNumber:
        type: string
      bankAccountProvider:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      isVerify:
        type: boolean
      location:
        type: string
      logoUrl:
        type: string
      name:
        type: string
      ownerId:
        type: string
      phone:
        type: string
      updateAt:
        type: string
    type: object
  domain.Size:
    properties:
      createdAt:
        type: string
      id:
        type: string
      size:
        type: string
      updatedAt:
        type: string
    type: object
  domain.SubDistrict:
    properties:
      districtId:
        type: string
      id:
        type: string
      nameTh:
        type: string
      zipcode:
        type: string
    type: object
  domain.Tag:
    properties:
      id:
        type: integer
      imageUrl:
        type: string
      label:
        type: string
      tagGroupId:
        type: integer
    type: object
  domain.TagGroup:
    properties:
      id:
        type: integer
      label:
        type: string
      show:
        type: boolean
      tag:
        items:
          $ref: '#/definitions/domain.Tag'
        type: array
    type: object
  domain.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      google_id:
        type: string
      id:
        type: string
      lastName:
        type: string
      phone:
        type: string
      profileUrl:
        type: string
      role:
        $ref: '#/definitions/domain.AccountType'
      updateAt:
        type: string
    type: object
  domain.Voucher:
    properties:
      code:
        type: string
      createdAt:
        type: string
      expiredAt:
        type: string
      id:
        type: string
      maxDiscount:
        type: number
      minTotalPrice:
        type: number
      percentage:
        type: number
      quota:
        type: integer
      updatedAt:
        type: string
    type: object
  payload.AddCartDTO:
    properties:
      productSizeId:
        type: string
      quantity:
        type: integer
    required:
    - productSizeId
    type: object
  payload.AddressDTO:
    properties:
      address:
        type: string
      default:
        type: boolean
      district:
        type: string
      email:
        type: string
      firstName:
        type: string
      label:
        type: string
      lastName:
        type: string
      phone:
        type: string
      province:
        type: string
      subDistrict:
        type: string
      zipCode:
        type: string
    required:
    - address
    - default
    - district
    - email
    - firstName
    - label
    - lastName
    - phone
    - province
    - subDistrict
    - zipCode
    type: object
  payload.CreateFavoriteDTO:
    properties:
      productId:
        type: string
    required:
    - productId
    type: object
  payload.CreateOrderPayload:
    properties:
      addressId:
        type: integer
      products:
        items:
          $ref: '#/definitions/payload.OrderProductPayload'
        type: array
      shippingPrice:
        type: number
      voucherId:
        type: string
    required:
    - addressId
    - products
    - shippingPrice
    type: object
  payload.CreateProductDTO:
    properties:
      description:
        type: string
      feature:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      productOption:
        items:
          $ref: '#/definitions/payload.ProductOptionDTO'
        type: array
      sellerId:
        type: string
      tagId:
        items:
          type: integer
        type: array
    required:
    - description
    - feature
    - imageUrl
    - name
    - price
    - productOption
    - sellerId
    type: object
  payload.CreateSellerDTO:
    properties:
      bankAccountName:
        type: string
      bankAccountNumber:
        type: string
      bankAccountProvider:
        type: string
      description:
        type: string
      location:
        type: string
      logoUrl:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - bankAccountName
    - bankAccountNumber
    - bankAccountProvider
    - description
    - location
    - logoUrl
    - name
    - phone
    type: object
  payload.CreateTagDTO:
    properties:
      imageUrl:
        type: string
      label:
        type: string
    required:
    - label
    type: object
  payload.CreateTagGroupDTO:
    properties:
      label:
        type: string
      show:
        type: boolean
      tag:
        items:
          $ref: '#/definitions/payload.CreateTagDTO'
        type: array
    required:
    - label
    - show
    type: object
  payload.CreateVoucherDTO:
    properties:
      code:
        type: string
      expiredAt:
        type: string
      maxDiscount:
        type: number
      minTotalPrice:
        type: number
      percentage:
        type: number
      quota:
        type: integer
    required:
    - code
    - expiredAt
    - maxDiscount
    - minTotalPrice
    - percentage
    - quota
    type: object
  payload.ExpressOrderUpdate:
    properties:
      expressProvider:
        type: string
      expressTrackingCode:
        type: string
    required:
    - expressProvider
    - expressTrackingCode
    type: object
  payload.OrderProductPayload:
    properties:
      productSizeId:
        type: string
      quantity:
        type: integer
    required:
    - productSizeId
    - quantity
    type: object
  payload.ProductOptionDTO:
    properties:
      imageUrl:
        type: string
      label:
        type: string
      productSize:
        items:
          $ref: '#/definitions/payload.ProductSizeDTO'
        type: array
    required:
    - imageUrl
    - label
    - productSize
    type: object
  payload.ProductSizeDTO:
    properties:
      quantity:
        type: integer
      sizeId:
        type: string
    required:
    - quantity
    - sizeId
    type: object
  payload.SizeDTO:
    properties:
      size:
        type: string
    required:
    - size
    type: object
  payload.TagDTO:
    properties:
      imageUrl:
        type: string
      label:
        type: string
      tagGroupId:
        type: integer
    required:
    - label
    - tagGroupId
    type: object
  payload.UpdateImageUserDTO:
    properties:
      profileUrl:
        type: string
    required:
    - profileUrl
    type: object
  payload.UpdateInfoUserDTO:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
    required:
    - firstName
    - lastName
    - phone
    type: object
  payload.UpdateProductDTO:
    properties:
      description:
        type: string
      feature:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      productOption:
        items:
          $ref: '#/definitions/payload.UpdateProductOptionDTO'
        type: array
      tagId:
        items:
          type: integer
        type: array
    required:
    - description
    - feature
    - name
    - price
    - productOption
    type: object
  payload.UpdateProductOptionDTO:
    properties:
      id:
        type: string
      imageUrl:
        type: string
      label:
        type: string
      productSize:
        items:
          $ref: '#/definitions/payload.UpdateProductSizeDTO'
        type: array
    required:
    - label
    - productSize
    type: object
  payload.UpdateProductSizeDTO:
    properties:
      id:
        type: string
      quantity:
        type: integer
      sizeId:
        type: string
    required:
    - quantity
    type: object
  payload.UpdateSellerDTO:
    properties:
      bankAccountName:
        type: string
      bankAccountNumber:
        type: string
      bankAccountProvider:
        type: string
      description:
        type: string
      id:
        type: string
      location:
        type: string
      logoUrl:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - bankAccountName
    - bankAccountNumber
    - bankAccountProvider
    - description
    - id
    - location
    - logoUrl
    - name
    - phone
    type: object
  payload.UpdateTagGroupDTO:
    properties:
      label:
        type: string
      show:
        type: boolean
      tag:
        items:
          $ref: '#/definitions/payload.TagDTO'
        type: array
    required:
    - label
    - show
    type: object
info:
  contact: {}
  description: This is a sample server celler server.
  title: Sofware Engineering Project Backend API
  version: "1.0"
paths:
  /api/address:
    get:
      consumes:
      - application/json
      description: Get address By User ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Address'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get address By User ID
      tags:
      - Address
    post:
      consumes:
      - application/json
      description: Create Address
      parameters:
      - description: Address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/payload.AddressDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Address
      tags:
      - Address
  /api/address/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Address
      tags:
      - Address
    get:
      consumes:
      - application/json
      description: Get By ID
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Address'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Get By ID
      tags:
      - Address
    put:
      consumes:
      - application/json
      description: Update Address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/payload.AddressDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Address
      tags:
      - Address
  /api/auth/google:
    get:
      consumes:
      - application/json
      description: Get google auth url
      parameters:
      - description: Redirect url
        in: query
        name: redirectUrl
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get google auth url
      tags:
      - Auth
  /api/auth/google/callback:
    get:
      consumes:
      - application/json
      description: Sign in with google
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Sign in with google
      tags:
      - Auth
  /api/auth/logout:
    get:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Logout
      tags:
      - Auth
  /api/auth/me:
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.User'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - Auth
  /api/cart:
    get:
      consumes:
      - application/json
      description: Get all cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Cart'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get all cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Add cart or update cart quantity if product already in cart for
        quantity is 0 then delete cart
      parameters:
      - description: Add cart
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.AddCartDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Cart'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Add cart
      tags:
      - Cart
  /api/cart/self:
    get:
      consumes:
      - application/json
      description: Get cart by user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Cart'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get cart by user id
      tags:
      - Cart
  /api/favorite:
    get:
      consumes:
      - application/json
      description: Get favorite by user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Favorite'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get favorite by user id
      tags:
      - Favorite
    post:
      consumes:
      - application/json
      description: Create favorite
      parameters:
      - description: Favorite
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateFavoriteDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Favorite'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Create favorite
      tags:
      - Favorite
  /api/favorite/{id}:
    delete:
      consumes:
      - application/json
      description: Delete favorite
      parameters:
      - description: Favorite ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete favorite
      tags:
      - Favorite
  /api/geo-location/districts/{province_id}:
    get:
      consumes:
      - application/json
      description: Get all districts by province id
      parameters:
      - description: Province ID
        in: path
        name: province_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.District'
                  type: array
              type: object
      summary: Get all districts by province id
      tags:
      - GeoLocation
  /api/geo-location/provinces:
    get:
      consumes:
      - application/json
      description: Get all provinces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Province'
                  type: array
              type: object
      summary: Get all provinces
      tags:
      - GeoLocation
  /api/geo-location/sub-districts/{district_id}:
    get:
      consumes:
      - application/json
      description: Get all sub-districts by district id
      parameters:
      - description: District ID
        in: path
        name: district_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.SubDistrict'
                  type: array
              type: object
      summary: Get all sub-districts by district id
      tags:
      - GeoLocation
  /api/order:
    get:
      consumes:
      - application/json
      description: Get all order
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Order'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get all order
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: Create order
      parameters:
      - description: Create Order Payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateOrderPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create order
      tags:
      - Order
  /api/order/express/{order_id}:
    put:
      consumes:
      - application/json
      description: Update order express
      parameters:
      - description: Express Order Update Payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.ExpressOrderUpdate'
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Update order express
      tags:
      - Order
  /api/order/self:
    get:
      consumes:
      - application/json
      description: Get self order
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Order'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get self order
      tags:
      - Order
  /api/order/self/{id}:
    get:
      consumes:
      - application/json
      description: Get self order detail
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Order'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get self order detail
      tags:
      - Order
  /api/order/seller/{seller_id}:
    get:
      consumes:
      - application/json
      description: Get seller order
      parameters:
      - description: Seller ID
        in: path
        name: seller_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Order'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get seller order
      tags:
      - Order
  /api/product:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Product'
                  type: array
              type: object
      summary: Get all products
      tags:
      - Product
    post:
      consumes:
      - application/json
      parameters:
      - description: Product Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - Product
  /api/product/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - Product
    get:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Product'
              type: object
      summary: Get product by id
      tags:
      - Product
    put:
      consumes:
      - application/json
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - Product
  /api/product/seller/{id}:
    get:
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Product'
                  type: array
              type: object
      summary: Get products by seller id
      tags:
      - Product
  /api/seller:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Seller'
                  type: array
              type: object
      summary: Get all sellers
      tags:
      - Seller
    patch:
      consumes:
      - application/json
      parameters:
      - description: Update Seller
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateSellerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Update seller
      tags:
      - Seller
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Seller
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateSellerDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create seller
      tags:
      - Seller
  /api/seller/{id}:
    get:
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Seller'
              type: object
      summary: Get seller by id
      tags:
      - Seller
  /api/seller/owner:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Seller'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get all sellers by owner
      tags:
      - Seller
  /api/seller/permission/{id}:
    get:
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Seller'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Check seller is owner by seller id
      tags:
      - Seller
  /api/size:
    get:
      consumes:
      - application/json
      description: Get all size
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Size'
              type: object
      summary: Get all size
      tags:
      - Size
    post:
      consumes:
      - application/json
      description: Create size
      parameters:
      - description: Size body
        in: body
        name: size
        required: true
        schema:
          $ref: '#/definitions/payload.SizeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Create size
      tags:
      - Size
  /api/tag:
    get:
      consumes:
      - application/json
      description: Get all tag
      parameters:
      - description: Filter by group tag ID
        in: query
        name: tagGroupId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Tag'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get all tag
      tags:
      - Tag
    post:
      consumes:
      - application/json
      description: Create tag
      parameters:
      - description: Create Tag
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.TagDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create tag
      tags:
      - Tag
  /api/tag/{id}:
    delete:
      consumes:
      - application/json
      description: Delete tag
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete tag
      tags:
      - Tag
    get:
      consumes:
      - application/json
      description: Get tag
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Tag'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      summary: Get tag
      tags:
      - Tag
    put:
      consumes:
      - application/json
      description: Update tag
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Tag
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.TagDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Update tag
      tags:
      - Tag
  /api/tag_group:
    get:
      consumes:
      - application/json
      description: Get all tag group
      parameters:
      - description: withTag
        in: query
        name: withTags
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.TagGroup'
                  type: array
              type: object
      summary: Get all tag group
      tags:
      - TagGroup
    post:
      consumes:
      - application/json
      description: Create tag group
      parameters:
      - description: Create Tag Group
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateTagGroupDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create tag group
      tags:
      - TagGroup
  /api/tag_group/{id}:
    delete:
      consumes:
      - application/json
      description: Delete tag group
      parameters:
      - description: Tag Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete tag group
      tags:
      - TagGroup
    put:
      consumes:
      - application/json
      description: Update tag group
      parameters:
      - description: Tag Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Tag Group
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateTagGroupDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Update tag group
      tags:
      - TagGroup
  /api/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload file
      tags:
      - Upload
  /api/upload/{filename}:
    get:
      description: Get an uploaded file by filename
      parameters:
      - description: Filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get uploaded file
      tags:
      - Upload
  /api/user:
    patch:
      consumes:
      - application/json
      description: Patch user profile
      parameters:
      - description: Patch user profile
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateInfoUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Patch user profile
      tags:
      - User
  /api/user/profile:
    patch:
      consumes:
      - application/json
      description: Patch profile
      parameters:
      - description: Patch user profile
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateImageUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Patch profile
      tags:
      - User
  /api/voucher:
    post:
      consumes:
      - application/json
      description: Create voucher
      parameters:
      - description: Voucher
        in: body
        name: voucher
        required: true
        schema:
          $ref: '#/definitions/payload.CreateVoucherDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.Response'
      security:
      - ApiKeyAuth: []
      summary: Create voucher
      tags:
      - Voucher
  /api/voucher/{code}:
    get:
      consumes:
      - application/json
      description: Search voucher by code
      parameters:
      - description: Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Voucher'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Search voucher by code
      tags:
      - Voucher
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
