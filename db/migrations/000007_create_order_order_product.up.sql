CREATE TABLE IF NOT EXISTS "voucher" (
  id UUID PRIMARY KEY,
  code TEXT NOT NULL,
  min_total_price DOUBLE PRECISION NOT NULL,
  max_discount DOUBLE PRECISION NOT NULL,
  percentage BOOLEAN NOT NULL,
  quota INT NOT NULL DEFAULT 0,
  expired_at TIMESTAMP NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
DO $$ BEGIN BEGIN CREATE TYPE order_status AS ENUM (
  'PENDING',
  'PAYMENT_SUCCESS',
  'REFUND',
  'END',
  'CANCEL'
);
EXCEPTION
WHEN duplicate_object THEN NULL;
END;
END;
$$;
CREATE TABLE IF NOT EXISTS "order" (
  id UUID PRIMARY KEY,
  user_id UUID NOT NULL,
  "status" order_status NOT NULL DEFAULT 'PENDING',
  total_price DOUBLE PRECISION NOT NULL,
  product_price DOUBLE PRECISION NOT NULL,
  shipping_price DOUBLE PRECISION NOT NULL,
  discount DOUBLE PRECISION NOT NULL DEFAULT 0,
  voucher_code UUID NULL,
  "address" TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (voucher_code) REFERENCES "voucher"(id),
  FOREIGN KEY (user_id) REFERENCES "users"(id)
);
DO $$ BEGIN BEGIN CREATE TYPE order_product_status AS ENUM (
  'PENDING',
  'DELIVERY_ON_THE_WAY',
  'DELIVERED'
);
EXCEPTION
WHEN duplicate_object THEN NULL;
END;
END;
$$;
CREATE TABLE IF NOT EXISTS "order_product" (
  id UUID PRIMARY KEY,
  order_id UUID NOT NULL,
  product_size_id UUID NOT NULL,
  "status" order_product_status NOT NULL DEFAULT 'PENDING',
  quantity INT NOT NULL,
  price DOUBLE PRECISION NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES "order"(id),
  FOREIGN KEY (product_size_id) REFERENCES "product_size"(id)
);